// import { join, resolve } from 'path';
import { Command, flags } from '@oclif/command'
import { findFilePath } from '../common/fileHelpers';
import { OverpassHighwayFile, ConvertToRoadSegmentsMap, RoadSegmentsFile, OpenStreetmapFile } from '@geo-ball/osm-data';
import { resolve, join, basename, dirname } from 'path';
import { existsSync } from 'fs';
// import { writeFileSync, readFileSync, existsSync } from 'fs';
// import { OverpassHighways, LatLngBounds, LatLng, IHighwayElement } from '@geo-ball/osm-data';
// import { AxiosResponse } from 'axios';
// import { BaseDataPath, RelDownloadDir } from '../defaults';
// import { findFilePath } from '../common';

class Transform extends Command {
	static description = 'Transforms OSM files to Road Segment Files'

	static examples = [
		'$ cli transform osmDataFile',
		'$ cli transform osmDataFile roadSegmentFile'
	]

	static flags = {
		help: flags.help({ char: 'h' }),
		overwrite: flags.boolean({ char: 'o' }),
	}
	static args = [
		{ name: 'osmDataFile', description: 'OSM Data file from download', required: true },
		{ name: 'roadSegementsFile', description: 'Road Line file for UCSD Graph', required: false , },
	]

	async run() {
		const { osmDataFilePath, roadSegementsFilePath } = this.getFilePaths();

		const osmFile = OpenStreetmapFile.LoadSync(osmDataFilePath);
		const osmElements = osmFile.getElements();
		const osmStats = osmElements.getStats();
		console.log('osmStats', JSON.stringify(osmStats, undefined, 4));

		console.log('osmFile bounds:', osmFile.osmQuery.latLngBounds.toString());

		const results = ConvertToRoadSegmentsMap(highwayFile.data, highwayFile.bounds);
		const rsf = new RoadSegmentsFile(highwayFile.bounds, highwayFile.timestamp, results);
		console.log('RSF lines:', rsf.data.length);
		RoadSegmentsFile.saveJsonFile(roadLinesJsonFilePath, rsf)
		RoadSegmentsFile.saveTextFile(roadLinesTextFilePath, rsf)
	}

	getFilePaths() {
		// tslint:disable-next-line:no-shadowed-variable
		const { args, flags } = this.parse(Transform)

		console.log('args:', JSON.stringify(args, undefined, 4))
		console.log('flags:', JSON.stringify(flags, undefined, 4))

		const osmDataFilePath = resolve(args.osmDataFile);
		console.log('osmDataFile', osmDataFilePath);
		if (!existsSync(osmDataFilePath)) {
			throw new Error('OSM Data file required');
		}

		const roadSegementsFilePath = args.osmDataFile
			? resolve(args.osmDataFile)
			: join(dirname(osmDataFilePath), basename(osmDataFilePath).replace('.osm-data.json', '.road-segs.json'));

		if (!existsSync(roadSegementsFilePath) && flags.overwrite !== true) {
			throw new Error('Road Segments File exists (use overwrite if needed0');
		}
		return { osmDataFilePath, roadSegementsFilePath };
	}
}
export default Transform;

