// import { join, resolve } from 'path';
import { Command, flags } from '@oclif/command'
import { findFilePath } from '../common';
import { OverpassHighwayFile, ConvertToRoadSegmentsMap, RoadSegmentsFile } from '@ball-maps/osm-data';
import { resolve, join } from 'path';
// import { writeFileSync, readFileSync } from 'fs'
// import { OverpassHighways, LatLngBounds, LatLng, IHighwayElement } from '@ball-maps/osm-data';
// import { AxiosResponse } from 'axios';
// import { BaseDataPath, RelDownloadDir } from '../defaults';
// import { findFilePath } from '../common';

class Transform extends Command {
    static description = 'download data files'

    static examples = [
        '$ cli transform'
    ]

    static flags = {
        help: flags.help({ char: 'h' }),
        overpassHighwaysFile: flags.string({ char: 'o', description: 'Highways JSON file from overpass.de', required: true }),
        roadSegementsFile: flags.string({ char: 'r', description: 'Road Line file for UCSD Graph', required: false }),
    }

    async run() {
        // tslint:disable-next-line:no-shadowed-variable
        const { args, flags } = this.parse(Transform)

        console.log('args:', JSON.stringify(args, undefined, 4))
        console.log('flags:', JSON.stringify(flags, undefined, 4))

        const overpassHighwaysFile = findFilePath(flags.overpassHighwaysFile);
        if (!overpassHighwaysFile) {
            throw new Error('Overpass file required')
        }

        console.log('overpassHighwaysFile', overpassHighwaysFile);

        const highwayFile = OverpassHighwayFile.loadJsonFile(overpassHighwaysFile)
        const stats = highwayFile.getStats();
        console.log('overpassHighwaysFile stats', JSON.stringify(stats, undefined, 4));

        console.log('highwayFile.bounds:', highwayFile.bounds.toString());
        const roadSegementsFileName = `RS.${flags.overpassHighwaysFile}`;

        const roadLinesJsonFilePath = resolve(join(process.cwd(), roadSegementsFileName));
        const roadLinesTextFilePath = resolve(join(process.cwd(), roadSegementsFileName.replace(".json", ".txt")));

        const results = ConvertToRoadSegmentsMap(highwayFile.data, highwayFile.bounds);
        const rsf = new RoadSegmentsFile(highwayFile.bounds, highwayFile.timestamp, results);
        console.log('RSF lines:', rsf.data.length);
        RoadSegmentsFile.saveJsonFile(roadLinesJsonFilePath, rsf)
        RoadSegmentsFile.saveTextFile(roadLinesTextFilePath, rsf)
    }
}
export default Transform;

