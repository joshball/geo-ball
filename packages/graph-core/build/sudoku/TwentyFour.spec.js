"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const ops = [
    { name: 'add', op: (a, b) => a + b, commutative: true },
    { name: 'sub', op: (a, b) => a - b, commutative: false },
    { name: 'mul', op: (a, b) => a * b, commutative: true },
    { name: 'div', op: (a, b) => a / b, commutative: false },
];
// 1,2 -> order
// 1+2 = 3
// 1-2 = -1
// 1*2 = 2
// 1/2 = .5
// #2+1 = 3
// 2-1 = 1
// #2*1 = 2
// 2/1 = 2
// => SO between any two numbers we do a O b, b-a, b/a
const mapOps = (lhs, rhs, noCommutative = false) => {
    return noCommutative ? ops.filter(o => o.commutative === false).map(o => o.op(lhs, rhs)) : ops.map(o => o.op(lhs, rhs));
};
const allOps = (lhs, rhs) => {
    return mapOps(lhs, rhs).concat(mapOps(rhs, lhs, true));
};
const allOpsEq = (lhs, rhs, result) => {
    const results = allOps(lhs, rhs);
    const index = results.indexOf(result);
    if (index >= 0) {
        return { index, results };
    }
};
const doIt = (nums) => {
    const sortedNums = nums.sort();
    const perms = [];
    // permutation (order matters) LOCK => 1,2,3 does NOT equal 3,2,1
    // number of permutations = n!/(n-k)! = 3! / (3-1)! => 3! / 2! => 3*2*1 / 2*1 => 6 / 2 => 3
    // 1,2
    // 2,1
    // 1,2,3
    // 1,3,2
    // 3,1,2
    // 3,2,1
    // 123 123 123
};
const tf = (cards) => {
    console.log('cards', cards);
    const nums = cards.map(c => parseInt(c[0], 10));
    console.log('nums', nums);
    const one = nums[0];
    const two = nums[1];
    const three = nums[2];
    const four = nums[3];
    // for three nums
    // 1,2,3
    // (1 / 2) / 3
    // (1 / (2 / 3)
    // 5,4,8,6 -> order
    // 4,5,6,8
    // 4,5,6,8 +,-,*,/ between each number
    //
    // nums.forEach(num => {
    // })
    return [
        '4s',
        '5d',
        '+',
        '6c',
        '-',
        '8h',
        '*',
    ];
};
ava_1.default('mapOps', t => {
    t.deepEqual(mapOps(1, 2), [3, -1, 2, .5]);
});
ava_1.default('allOps', t => {
    t.deepEqual(allOps(1, 2), [3, -1, 2, .5, 1, 2]);
});
ava_1.default('allOpsEq', t => {
    t.deepEqual(allOpsEq(1, 2, 2), { index: 2, results: [3, -1, 2, .5, 1, 2] });
});
ava_1.default('one', t => {
    const nums = ['5d', '4s', '8h', '6c'];
    const result = tf(nums);
    t.deepEqual(result, [
        '4s',
        '5d',
        '+',
        '6c',
        '-',
        '8h',
        '*',
    ]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHdlbnR5Rm91ci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N1ZG9rdS9Ud2VudHlGb3VyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBdUI7QUFFdkIsTUFBTSxHQUFHLEdBQUc7SUFDUixFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBVSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFO0lBQy9FLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFTLEVBQUUsQ0FBUyxFQUFVLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUU7SUFDaEYsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQVUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRTtJQUMvRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBUyxFQUFFLENBQVMsRUFBVSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO0NBQ25GLENBQUM7QUFFRixlQUFlO0FBQ2YsVUFBVTtBQUNWLFdBQVc7QUFDWCxVQUFVO0FBQ1YsV0FBVztBQUNYLFdBQVc7QUFDWCxVQUFVO0FBQ1YsV0FBVztBQUNYLFVBQVU7QUFDVixzREFBc0Q7QUFFdEQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxHQUFXLEVBQUUsR0FBVyxFQUFFLGdCQUF5QixLQUFLLEVBQVksRUFBRTtJQUNsRixPQUFPLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEtB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